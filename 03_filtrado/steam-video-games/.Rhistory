for(j in 1:ncol(games.usg.dist)) {
music.usg.dist[i,j] <- dist.cosine(games.usg.dist[,i],
games.usg.dist[,j])
}
}
dim(music.usg.dist)
# Lets display some results
#colnames(games.usg.dist)
music.usg.dist[1:5,1:5]
# Now lets find the 10 users more similar to a provided user
# We need first to convert again to data frame the matrix created (as matrix it can not be computed)
music.usage.dist.df <- data.frame(music.usg.dist)
music.usage.similar.artists <- matrix(NA, nrow=ncol(music.usage.dist.df),
ncol=10,
dimname=list(gamesNames))
dim(music.usage.similar.artists)
# we can agroup by similarity if we just order the  vectors
rownames(music.usage.dist.df[order(music.usage.dist.df[,1], decreasing=T),])[1:10]
# Lets apply this logic but for all collumns the first one is allways the group itself then we are going to take from 2 to 11
for(i in 1:ncol(music.usage.dist.df)) {
music.usage.similar.artists[i,] <-
rownames(
music.usage.dist.df[
order(music.usage.dist.df[,i], decreasing=T),])[2:11]
}
music.usage.similar.artists["The.Elder.Scrolls.V.Skyrim",]
music.usage.similar.artists["Fallout.4",]
# Now we are going to provide recomendations
# Lets map User vs group
user.data <- matrix(NA, nrow=length(userNames),
ncol=length(gamesNames),
dimname=list(userNames,
gamesNames))
dim(user.data)
# The score of one artist will consider the cosine distance of the artist that like the user (the value is normalized using all the cosine distances)
# For example if history is all 1s the the recomendation score will be 1.0
# Apparently this function works better if our data has many 0s
score.recommendation <- function(history, similarities) {
return(sum(history*similarities)/sum(similarities))
}
# Apparently this function works better if our data has many 1s
#score.recommendation <- function(history, similarities) {
#  return(sum(history*similarities)/length(history))
#}
# Clean up
#Clean up
for (i in 1:nrow(user.data)) {
for (j in 1:ncol(user.data)){
user <- rownames(user.data)[i]
artist <- colnames(user.data)[j]
# validaci??n 1
if (games.usg.dist[user,artist]==1) {
user.data[user,artist] = -1;
}
else
{
# Take the value  of the cosine distance of the 6 more similar artist to the provided artist
top.artists <- head(n=6,
music.usage.dist.df[order(
music.usage.dist.df[,artist], decreasing=T),][artist])
# Remove the first one because it is the same artist that the provided
top.artists.names <- rownames(top.artists)[-1]
top.artists.sim <- (top.artists[,1])[-1]
# Take the answer (1 or 0) from the user for the calculated 5 more similar groups to the group analized
top.artists.history <-
games.usg.dist[user,top.artists.names]
# give a score for such artist for the current user
user.data[user,artist] =
score.recommendation(top.artists.history, top.artists.sim)
}
}
}
# Ignore the error, maybe there is a null in the matrix
# Recomendation for user 1
head(sort(user.data[4,], decreasing = T))
#Recomendations over 0.8
for (i in 1:nrow(user.data)) {
for (j in 1:ncol(user.data)){
user <- rownames(user.data)[i]
artist <- colnames(user.data)[j]
if(user.data[i,j] > 0.8){
print(c("We suggest to user: ", user, "the artist: ", artist))
}
}
}
top.artists.history
# Ignore the error, maybe there is a null in the matrix
# Recomendation for user 1
head(sort(user.data[1,], decreasing = T))
# Ignore the error, maybe there is a null in the matrix
# Recomendation for user 1
head(sort(user.data[2,], decreasing = T))
user.data <- matrix(NA, nrow=length(userNames),
ncol=length(gamesNames),
dimname=list(userNames,
gamesNames))
dim(user.data)
user.data
head(user.data)
head(user.data)
user <- rownames(user.data)[2]
artist <- colnames(user.data)[1]
user
artist
if (games.usg.dist[user,artist]==1) {
user.data[user,artist] = -1;
}
user.data[user,artist]
top.artists <- head(n=6,
music.usage.dist.df[order(
music.usage.dist.df[,artist], decreasing=T),][artist])
top.artists
top.artists.names <- rownames(top.artists)[-1]
top.artists.sim <- (top.artists[,1])[-1]
top.artists.names
top.artists.sim
top.artists.history <-
games.usg.dist[user,top.artists.names]
top.artists.history
user.data[user,artist] <-
score.recommendation(top.artists.history, top.artists.sim)
user.data[user,artist]
top.artists.sim
top.artists.history
top.artists.history["Borderlands.2"] <- 1
top.artists.history
user.data[user,artist] <-
score.recommendation(top.artists.history, top.artists.sim)
user.data[user,artist]
user <- rownames(user.data)[2]
artist <- colnames(user.data)[2]
if (games.usg.dist[user,artist]==1) {
user.data[user,artist] = -1;
}
else
{
# Take the value  of the cosine distance of the 6 more similar artist to the provided artist
top.artists <- head(n=6,
music.usage.dist.df[order(
music.usage.dist.df[,artist], decreasing=T),][artist])
# Remove the first one because it is the same artist that the provided
top.artists.names <- rownames(top.artists)[-1]
top.artists.sim <- (top.artists[,1])[-1]
# Take the answer (1 or 0) from the user for the calculated 5 more similar groups to the group analized
top.artists.history <-
games.usg.dist[user,top.artists.names]
top.artists.history["Borderlands.2"] <- 1
# give a score for such artist for the current user
user.data[user,artist] <-
score.recommendation(top.artists.history, top.artists.sim)
}
top.artists.history
user <- rownames(user.data)[2]
artist <- colnames(user.data)[2]
if (games.usg.dist[user,artist]==1) {
user.data[user,artist] = -1;
}
else
{
# Take the value  of the cosine distance of the 6 more similar artist to the provided artist
top.artists <- head(n=6,
music.usage.dist.df[order(
music.usage.dist.df[,artist], decreasing=T),][artist])
# Remove the first one because it is the same artist that the provided
top.artists.names <- rownames(top.artists)[-1]
top.artists.sim <- (top.artists[,1])[-1]
# Take the answer (1 or 0) from the user for the calculated 5 more similar groups to the group analized
top.artists.history <-
games.usg.dist[user,top.artists.names]
# give a score for such artist for the current user
user.data[user,artist] <-
score.recommendation(top.artists.history, top.artists.sim)
}
top.artists.history
top.artists.sim
user.data[user,artist]
user <- rownames(user.data)[2]
artist <- colnames(user.data)[3]
if (games.usg.dist[user,artist]==1) {
user.data[user,artist] = -1;
}
else
{
# Take the value  of the cosine distance of the 6 more similar artist to the provided artist
top.artists <- head(n=6,
music.usage.dist.df[order(
music.usage.dist.df[,artist], decreasing=T),][artist])
# Remove the first one because it is the same artist that the provided
top.artists.names <- rownames(top.artists)[-1]
top.artists.sim <- (top.artists[,1])[-1]
# Take the answer (1 or 0) from the user for the calculated 5 more similar groups to the group analized
top.artists.history <-
games.usg.dist[user,top.artists.names]
# give a score for such artist for the current user
user.data[user,artist] <-
score.recommendation(top.artists.history, top.artists.sim)
}
top.artists.history
top.artists.sim
user.data[user,artist]
i <- 2
for (j in 1:ncol(user.data)){
user <- rownames(user.data)[i]
artist <- colnames(user.data)[j]
if (games.usg.dist[user,artist]==1) {
user.data[user,artist] = -1;
}
else
{
# Take the value  of the cosine distance of the 6 more similar artist to the provided artist
top.artists <- head(n=6,
music.usage.dist.df[order(
music.usage.dist.df[,artist], decreasing=T),][artist])
# Remove the first one because it is the same artist that the provided
top.artists.names <- rownames(top.artists)[-1]
top.artists.sim <- (top.artists[,1])[-1]
# Take the answer (1 or 0) from the user for the calculated 5 more similar groups to the group analized
top.artists.history <-
games.usg.dist[user,top.artists.names]
# give a score for such artist for the current user
user.data[user,artist] <-
score.recommendation(top.artists.history, top.artists.sim)
}
}
user.data[user,]
artist <- The.Cat.Lady
if (games.usg.dist[user,artist]==1) {
user.data[user,artist] = -1;
}
else
{
# Take the value  of the cosine distance of the 6 more similar artist to the provided artist
top.artists <- head(n=6,
music.usage.dist.df[order(
music.usage.dist.df[,artist], decreasing=T),][artist])
# Remove the first one because it is the same artist that the provided
top.artists.names <- rownames(top.artists)[-1]
top.artists.sim <- (top.artists[,1])[-1]
# Take the answer (1 or 0) from the user for the calculated 5 more similar groups to the group analized
top.artists.history <-
games.usg.dist[user,top.artists.names]
# give a score for such artist for the current user
user.data[user,artist] <-
score.recommendation(top.artists.history, top.artists.sim)
}
artist <- "The.Cat.Lady"
if (games.usg.dist[user,artist]==1) {
user.data[user,artist] = -1;
}
else
{
# Take the value  of the cosine distance of the 6 more similar artist to the provided artist
top.artists <- head(n=6,
music.usage.dist.df[order(
music.usage.dist.df[,artist], decreasing=T),][artist])
# Remove the first one because it is the same artist that the provided
top.artists.names <- rownames(top.artists)[-1]
top.artists.sim <- (top.artists[,1])[-1]
# Take the answer (1 or 0) from the user for the calculated 5 more similar groups to the group analized
top.artists.history <-
games.usg.dist[user,top.artists.names]
# give a score for such artist for the current user
user.data[user,artist] <-
score.recommendation(top.artists.history, top.artists.sim)
}
user.data[user,artist]
i <- 2
for (j in 1:ncol(user.data)){
user <- rownames(user.data)[i]
artist <- colnames(user.data)[j]
if(FALSE == (artist %in% colnames(music.usage.dist.df))){
print(artist)
}
if (games.usg.dist[user,artist]==1) {
user.data[user,artist] = -1;
}
else
{
# Take the value  of the cosine distance of the 6 more similar artist to the provided artist
top.artists <- head(n=6,
music.usage.dist.df[order(
music.usage.dist.df[,artist], decreasing=T),][artist])
# Remove the first one because it is the same artist that the provided
top.artists.names <- rownames(top.artists)[-1]
top.artists.sim <- (top.artists[,1])[-1]
# Take the answer (1 or 0) from the user for the calculated 5 more similar groups to the group analized
top.artists.history <-
games.usg.dist[user,top.artists.names]
# give a score for such artist for the current user
user.data[user,artist] <-
score.recommendation(top.artists.history, top.artists.sim)
}
}
colnames(music.usage.dist.df)
if(FALSE == ("Dragon.Age.Origins.-.Ultimate.Edition" %in% colnames(music.usage.dist.df))){
print(Dragon.Age.Origins.-.Ultimate.Edition)
}
if(FALSE == ("Dragon.Age.Origins.-.Ultimate.Edition" %in% colnames(music.usg.dist))){
print(Dragon.Age.Origins.-.Ultimate.Edition)
}
if(FALSE == ("Dragon.Age.Origins.-.Ultimate.Edition" %in% colnames(music.usage.dist.df))){
print(Dragon.Age.Origins.-.Ultimate.Edition)
}
if(FALSE == ("Dragon.Age.Origins.-.Ultimate.Edition" %in% colnames(music.usg.dist))){
print("Dragon.Age.Origins.-.Ultimate.Edition")
}
if(FALSE == ("Dragon.Age.Origins.-.Ultimate.Edition" %in% colnames(music.usage.dist.df))){
print("Dragon.Age.Origins.-.Ultimate.Edition")
}
colnames(music.usage.dist.df)
colnames(music.usg.dist)
colnames(music.usage.dist.df)
colnames(music.usg.dist)
if(FALSE == ("Dragon.Age.Origins.-.Ultimate.Edition" %in% colnames(music.usg.dist))){
print("Dragon.Age.Origins.-.Ultimate.Edition")
}
if(FALSE == ("Dragon.Age.Origins.-.Ultimate.Edition" %in% colnames(music.usage.dist.df))){
print("Dragon.Age.Origins.-.Ultimate.Edition")
}
colnames(music.usg.dist)
colnames(music.usage.dist.df)
if(FALSE == ("The.Elder.Scrolls.V.Skyrim" %in% colnames(music.usg.dist))){
print("Dragon.Age.Origins.-.Ultimate.Edition")
}
if(FALSE == ("The.Elder.Scrolls.V.Skyrim" %in% colnames(music.usage.dist.df))){
print("Dragon.Age.Origins.-.Ultimate.Edition")
}
i <- 2
for (j in 1:ncol(user.data)){
user <- rownames(user.data)[i]
artist <- colnames(user.data)[j]
if(FALSE == (artist %in% colnames(music.usage.dist.df))){
print(artist)
user.data[user,artist] = -1;
}
else
{
if (games.usg.dist[user,artist]==1) {
user.data[user,artist] = -1;
}
else
{
# Take the value  of the cosine distance of the 6 more similar artist to the provided artist
top.artists <- head(n=6,
music.usage.dist.df[order(
music.usage.dist.df[,artist], decreasing=T),][artist])
# Remove the first one because it is the same artist that the provided
top.artists.names <- rownames(top.artists)[-1]
top.artists.sim <- (top.artists[,1])[-1]
# Take the answer (1 or 0) from the user for the calculated 5 more similar groups to the group analized
top.artists.history <-
games.usg.dist[user,top.artists.names]
# give a score for such artist for the current user
user.data[user,artist] <-
score.recommendation(top.artists.history, top.artists.sim)
}
}
}
user.data[user,]
i <- 2
for (j in 1:ncol(user.data)){
user <- rownames(user.data)[i]
artist <- colnames(user.data)[j]
if(FALSE == (artist %in% colnames(music.usage.dist.df))){
print(artist)
user.data[user,artist] = -1;
}
else
{
if (games.usg.dist[user,artist]==1) {
user.data[user,artist] = -1;
}
else
{
# Take the value  of the cosine distance of the 6 more similar artist to the provided artist
top.artists <- head(n=6,
music.usage.dist.df[order(
music.usage.dist.df[,artist], decreasing=T),][artist])
# Remove the first one because it is the same artist that the provided
top.artists.names <- rownames(top.artists)[-1]
top.artists.sim <- (top.artists[,1])[-1]
# Take the answer (1 or 0) from the user for the calculated 5 more similar groups to the group analized
top.artists.history <-
games.usg.dist[user,top.artists.names]
# give a score for such artist for the current user
user.data[user,artist] <-
score.recommendation(top.artists.history, top.artists.sim)
}
}
}
user.data <- matrix(NA, nrow=length(userNames),
ncol=length(gamesNames),
dimname=list(userNames,
gamesNames))
dim(user.data)
for (i in 1:nrow(user.data)) {
for (j in 1:ncol(user.data)){
user <- rownames(user.data)[i]
artist <- colnames(user.data)[j]
# validaci??n 1
if(FALSE == (artist %in% colnames(music.usage.dist.df))){
#print(artist)
user.data[user,artist] = -1;
}
else
{
if (games.usg.dist[user,artist]==1) {
user.data[user,artist] = -1;
}
else
{
# Take the value  of the cosine distance of the 6 more similar artist to the provided artist
top.artists <- head(n=6,
music.usage.dist.df[order(
music.usage.dist.df[,artist], decreasing=T),][artist])
# Remove the first one because it is the same artist that the provided
top.artists.names <- rownames(top.artists)[-1]
top.artists.sim <- (top.artists[,1])[-1]
# Take the answer (1 or 0) from the user for the calculated 5 more similar groups to the group analized
top.artists.history <-
games.usg.dist[user,top.artists.names]
# give a score for such artist for the current user
user.data[user,artist] <-
score.recommendation(top.artists.history, top.artists.sim)
}
}
}
}
# Ignore the error, maybe there is a null in the matrix
# Recomendation for user 1
head(sort(user.data[2,], decreasing = T))
#Recomendations over 0.8
for (i in 1:nrow(user.data)) {
for (j in 1:ncol(user.data)){
user <- rownames(user.data)[i]
artist <- colnames(user.data)[j]
if(user.data[i,j] > 0.8){
print(c("We suggest to user: ", user, "the artist: ", artist))
}
}
}
# Ignore the error, maybe there is a null in the matrix
# Recomendation for user 1
head(sort(user.data[1,], decreasing = T))
# Ignore the error, maybe there is a null in the matrix
# Recomendation for user 1
head(sort(user.data[3,], decreasing = T))
# Ignore the error, maybe there is a null in the matrix
# Recomendation for user 1
head(sort(user.data[4,], decreasing = T))
is.NA(NA)
is.na(NA)
for (i in 1:nrow(user.data)) {
for (j in 1:ncol(user.data)){
user <- rownames(user.data)[i]
artist <- colnames(user.data)[j]
if(is.na(user.data[i,j]) == FALSE){
if(user.data[i,j] > 0.8){
print(c("We suggest to user: ", user, "the artist: ", artist))
}
}
}
}
#Recomendations over 0.8
for (i in 1:nrow(user.data)) {
for (j in 1:ncol(user.data)){
user <- rownames(user.data)[i]
artist <- colnames(user.data)[j]
if(is.na(user.data[i,j]) == FALSE){
if(user.data[i,j] > 0.8){
print(c("We suggest to user: ", user, "the game: ", artist))
}
}
}
}
music.usage["151603712","Microsoft.Flight.Simulator.X.Steam.Edition"]
music.usage[151603712,"Microsoft.Flight.Simulator.X.Steam.Edition"]
games.usg.dist["151603712","Microsoft.Flight.Simulator.X.Steam.Edition"]
top.artists <- head(n=6,
music.usage.dist.df[order(
music.usage.dist.df[,"Microsoft.Flight.Simulator.X.Steam.Edition"], decreasing=T),]["Microsoft.Flight.Simulator.X.Steam.Edition"])
top.artists
top.artists.names <- rownames(top.artists)[-1]
top.artists.sim <- (top.artists[,1])[-1]
top.artists.names
top.artists.sim
top.artists.history <-
music.usage["151603712",top.artists.names]
top.artists.history <-
games.usg.dist["151603712",top.artists.names]
top.artists.history
user.Microsoft.Flight.Simulatort.recomendation <-  score.recommendation(top.artists.history, top.artists.sim)
user.Microsoft.Flight.Simulatort.recomendation
games.usg.dist["11373749","Hitman.Sniper.Challenge"]
top.artists <- head(n=6,
music.usage.dist.df[order(
music.usage.dist.df[,"Hitman.Sniper.Challenge"], decreasing=T),]["Hitman.Sniper.Challenge"])
top.artists
top.artists.names <- rownames(top.artists)[-1]
top.artists.sim <- (top.artists[,1])[-1]
top.artists.names
top.artists.sim
top.artists.history <-
games.usg.dist["151603712",top.artists.names]
top.artists.history
top.artists.history <-
games.usg.dist["11373749",top.artists.names]
top.artists.history
user.Microsoft.Flight.Simulatort.recomendation <-  score.recommendation(top.artists.history, top.artists.sim)
user.hitman.recomendation <-  score.recommendation(top.artists.history, top.artists.sim)
user.hitman.recomendation
dim(user.data)
